import os
import json
from flask import Flask, request, redirect, session, url_for
from google_auth_oauthlib.flow import Flow
from googleapiclient.discovery import build
import google.oauth2.credentials
import openai

app = Flask(__name__)
app.secret_key = 'd0a9f37d3f9c4e199ab64bfa4378b84b3a5f2c0f9f62f7a6e9c1f1b2d5c95488'  # Replace with your secret key

# Load OpenAI API key
openai.api_key = 'sk-proj-LKXbTmo2TSkMI3yDqB1GT3BlbkFJEJRnTU5P6ouRd4nhvNPJ'  # Replace with your OpenAI API key

# Load OAuth 2.0 credentials
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
CLIENT_SECRETS_FILE = 'client_secret_576219286638-51ia9ah5kpsd4ltc0atjvifa156mkosm.apps.googleusercontent.com.json'
SCOPES = [
    'https://www.googleapis.com/auth/gmail.readonly',
    'https://www.googleapis.com/auth/drive.readonly'
]
REDIRECT_URI = 'http://localhost:8080/oauth2callback'

@app.route('/')
def index():
    if 'credentials' not in session:
        return redirect('authorize')
    return 'Authorization successful. Ready to interact with Gmail and Google Drive.'

@app.route('/authorize')
def authorize():
    flow = Flow.from_client_secrets_file(CLIENT_SECRETS_FILE, scopes=SCOPES)
    flow.redirect_uri = url_for('oauth2callback', _external=True)
    authorization_url, state = flow.authorization_url()
    session['state'] = state
    return redirect(authorization_url)

@app.route('/oauth2callback')
def oauth2callback():
    state = session['state']
    flow = Flow.from_client_secrets_file(CLIENT_SECRETS_FILE, scopes=SCOPES, state=state)
    flow.redirect_uri = url_for('oauth2callback', _external=True)
    authorization_response = request.url
    flow.fetch_token(authorization_response=authorization_response)
    credentials = flow.credentials
    session['credentials'] = credentials_to_dict(credentials)
    return redirect(url_for('index'))

def credentials_to_dict(credentials):
    return {
        'token': credentials.token,
        'refresh_token': credentials.refresh_token,
        'token_uri': credentials.token_uri,
        'client_id': credentials.client_id,
        'client_secret': credentials.client_secret,
        'scopes': credentials.scopes
    }

@app.route('/summarize_email')
def summarize_email():
    if 'credentials' not in session:
        return redirect('authorize')

    credentials = google.oauth2.credentials.Credentials(**session['credentials'])
    service = build('gmail', 'v1', credentials=credentials)

    results = service.users().messages().list(userId='me', labelIds=['INBOX'], q='is:unread').execute()
    messages = results.get('messages', [])

    summaries = []
    for message in messages:
        msg = service.users().messages().get(userId='me', id=message['id']).execute()
        email_data = msg['snippet']

        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": f"Summarize this email: {email_data}"}
            ]
        )

        summary = response['choices'][0]['message']['content'].strip()
        summaries.append(summary)

    session['credentials'] = credentials_to_dict(credentials)
    return 'Email Summaries: ' + '<br>'.join(summaries)

@app.route('/summarize_drive')
def summarize_drive():
    if 'credentials' not in session:
        return redirect('authorize')

    credentials = google.oauth2.credentials.Credentials(**session['credentials'])
    service = build('drive', 'v3', credentials=credentials)

    results = service.files().list(pageSize=10, fields="nextPageToken, files(id, name, mimeType)").execute()
    items = results.get('files', [])

    summaries = []
    for item in items:
        file_id = item['id']
        file_name = item['name']
        mime_type = item['mimeType']

        file_content = None

        if mime_type.startswith('application/vnd.google-apps.'):
            # Handle Google Docs files
            if mime_type == 'application/vnd.google-apps.document':
                export_mime_type = 'text/plain'
            elif mime_type == 'application/vnd.google-apps.spreadsheet':
                export_mime_type = 'text/csv'
            elif mime_type == 'application/vnd.google-apps.presentation':
                export_mime_type = 'text/plain'
            else:
                # Skip if it's another type of Google Docs file
                continue

            file_content = service.files().export(fileId=file_id, mimeType=export_mime_type).execute()
            file_content = file_content.decode('utf-8')
        else:
            # Handle non-Google Docs files
            file_content = service.files().get_media(fileId=file_id).execute()

            # Attempt to decode binary content
            try:
                file_content = file_content.decode('utf-8')
            except UnicodeDecodeError:
                file_content = None

        if file_content:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": f"Summarize this document: {file_content}"}
                ]
            )

            summary = response['choices'][0]['message']['content'].strip()
            summaries.append(f"{file_name}: {summary}")

    session['credentials'] = credentials_to_dict(credentials)
    return 'Document Summaries: ' + '<br>'.join(summaries)

if __name__ == '__main__':
    app.run('localhost', 8080, debug=True)
